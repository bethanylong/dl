#!/usr/bin/env python

import curses
import time
import threading
import sys

def read_train(filename='train.txt'):
    with open(filename) as fh:
        return fh.readlines()

def bell():
    while True:
        sys.stdout.write('\a')
        sys.stdout.flush()
        time.sleep(0.5)

def train():
    try:
        curses.wrapper(curses_train)
    except KeyboardInterrupt:
        # You fool.
        pass

def put_in_box(text):
    top_and_bottom = '+' + '-' * (len(text) + 2) + '+'
    middle = '| ' + text + ' |'
    return [top_and_bottom, middle, top_and_bottom]

def render_obstacle(stdscr, text='Node 3', y=12, x=5):
    box_text = put_in_box(text)
    for line_offset, line in enumerate(box_text):
        stdscr.addstr(y + line_offset, x, line)

def curses_train(stdscr):
    max_y, max_x = stdscr.getmaxyx()
    curses.curs_set(0)

    #bad_train = "#####"
    good_train = read_train()
    y = 10
    x = 5
    
    #stdscr.addstr(y, x,  bad_train)
    render_obstacle(stdscr)
    stdscr.refresh()

    train_len = max([len(line) for line in good_train])
    for train_progress in reversed(range(-train_len, max_x)):
        #stdscr.addstr(y, train_progress, good_train)

        if train_progress >= 0:
            for y_offset, line in enumerate(good_train):
                stdscr.addstr(y + y_offset, train_progress, line[0 : max_x - train_progress])
        else:
            # Simulate drawing off end of screen
            for y_offset, line in enumerate(good_train):
                stdscr.addstr(y + y_offset, 0, line[-train_progress : max_x - train_progress])
        stdscr.refresh()
        #time.sleep(0.05)
        time.sleep(0.02)

if __name__ == '__main__':
    train()
