#!/usr/bin/env python

import curses
import time
import threading
import sys
import click

def read_train(filename='train.txt'):
    with open(filename) as fh:
        return fh.readlines()

def beep():
    sys.stdout.write('\a')
    sys.stdout.flush()

def bell(train_thr):
    while train_thr.is_alive():
        beep()
        time.sleep(0.5)

def train(obstacle=None):
    try:
        curses.wrapper(curses_train, obstacle)
    except KeyboardInterrupt:
        # You fool.
        pass

def put_in_box(text):
    top_and_bottom = '+' + '-' * (len(text) + 2) + '+'
    middle = '| ' + text + ' |'
    return [top_and_bottom, middle, top_and_bottom]

def render_obstacle(stdscr, obstacle, y=13, x=5):
    max_y, max_x = stdscr.getmaxyx()
    box_text = put_in_box(obstacle)
    for line_offset, line in enumerate(box_text):
        stdscr.addstr(y + line_offset, x, line[:max_x - x])

def render_exhaust(stdscr, train_progress, base_y):
    """Fill y-space above train with hyper-realistic exhaust."""
    max_y, max_x = stdscr.getmaxyx()
    exh_left = 23  # Begin exhaust on F59 sprite
    exh_right = 43 # End exhaust on F59 sprite

    # TODO
    pass

def draw_train(screen, train, given_y, given_x):
    max_y, max_x = screen.getmaxyx()
    for y_offset, line in enumerate(train):
        line_to_display = line
        x = given_x

        if given_x >= 0:
            # Haven't begun to go off screen: make pretty collisions
            pretty_line = line_to_display.lstrip()
            stripped_spaces = len(line) - len(pretty_line)
            line_to_display = pretty_line
            x += stripped_spaces
        else:
            # Decide how much of front of train to cut off
            line_to_display = line_to_display[-given_x:]
            x = 0

        display_length = min(len(line_to_display), max_x - x)
        line_to_display = line_to_display[:display_length]

        if x >= max_x or x < -len(line_to_display):
            return

        screen.addstr(given_y + y_offset, x, line_to_display)

def curses_train(stdscr, obstacle):
    max_y, max_x = stdscr.getmaxyx()
    curses.curs_set(0)

    train = read_train()
    y = 10
    x = 5

    debris_x = 50
    debris_y = 15
    debris_spread = 5
    
    if obstacle:
        render_obstacle(stdscr, obstacle)
        stdscr.refresh()

    train_len = max([len(line) for line in train])
    for train_progress in reversed(range(-train_len, max_x)):
        draw_train(stdscr, train, y, train_progress)
        stdscr.refresh()
        time.sleep(0.02)

@click.command()
@click.option('--obstacle', '-o')
def main(obstacle):
    train_thr = threading.Thread(target=train, args=[obstacle])
    bell_thr = threading.Thread(target=bell, args=[train_thr])

    train_thr.start()
    bell_thr.start()

if __name__ == '__main__':
    main()
